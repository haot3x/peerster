
#include <unistd.h>

#include <QVBoxLayout>
#include <QApplication>
#include <QDebug>

#include "main.hh"

ChatDialog::ChatDialog()
{
    // Tian: Generate partial origin with rand num
    qsrand(time(0));
    randomOriginID = qrand();
    // Tian: Initialize SeqNo;
    SeqNo = 1;
    // Tian: Initialize recvMessageMap;
    recvMessageMap = new QVariantMap(); 
    updateStatusMap = new QVariantMap(); 
    ackHist = new QVector<QString>();

	setWindowTitle("Peerster");

	// Read-only text box where we display messages from everyone.
	// This widget expands both horizontally and vertically.
	textview = new QTextEdit(this);
	textview->setReadOnly(true);

	// Small text-entry box the user can enter messages.
	// This widget normally expands only horizontally,
	// leaving extra vertical space for the textview widget.
	//
	// You might change this into a read/write QTextEdit,
	// so that the user can easily enter multi-line messages.
    // Exercise 2. Tian modified the class
	textedit= new QTextEdit(this);
    textedit->installEventFilter(this);
    
	// Lay out the widgets to appear in the main window.
	// For Qt widget and layout concepts see:
	// http://doc.qt.nokia.com/4.7-snapshot/widgets-and-layouts.html
	QVBoxLayout *layout = new QVBoxLayout();
	layout->addWidget(textview);
	layout->addWidget(textedit);
    // Exercise 1. Tian added it to set focus on the textedit without having to click in it first.
    textedit->setFocus();

	setLayout(layout);

	// Register a callback on the textedit's returnPressed signal
	// so that we can send the message entered by the user.
	connect(textedit, SIGNAL(returnPressed()),
		this, SLOT(gotReturnPressed()));
    //NetSocket sock;
    sockRecv = new NetSocket();
	if (!sockRecv->bind())
		exit(1);
    connect(sockRecv, SIGNAL(readyRead()),
        this, SLOT(gotRecvMessage()));
}

void ChatDialog::gotReturnPressed()
{
    if (!ackHist->contains(*OriSeq))
    {
        // Initially, just echo the string locally.
        // Insert some networking code here...
    
        // Exercise 3. Tian added networking code here
        // Build map
        QVariantMap *rumorMessage = new QVariantMap();
        rumorMessage->insert("ChatText", textedit->toPlainText());
        rumorMessage->insert("Origin", QHostInfo::localHostName() + QString::number(randomOriginID));
        rumorMessage->insert("SeqNo", SeqNo);
    
        QString *OriSeq = new QString(QHostInfo::localHostName() + QString::number(randomOriginID) + "." + QString::number(SeqNo));

        // Serialize to an instance of QByteArray
        QByteArray *bytearrayToSend = new QByteArray();
        QDataStream bytearrayStreamOut(bytearrayToSend, QIODevice::WriteOnly);
        bytearrayStreamOut << (*rumorMessage);

        // TODO QTimer to ensure the acknowledgment 
        // send the datagram to 4 ports via local host
        NetSocket sockSend;
        for (int destPort =  sockSend.getMyPortMin(); destPort <= sockSend.getMyPortMax(); destPort++)
        {
            qint64 int64Status = sockSend.writeDatagram(*bytearrayToSend, QHostAddress::LocalHost, destPort);
            if (int64Status == -1) exit(1); 
            qDebug() << "sent to " << (quint16)(destPort) << " SIZE:" << int64Status;

            // Set timer to receive the remote peer's acknowledgment
            timerForAck = new QTimer(this);
            //connect(timerForAck, SIGNAL(timeout()), this, SLOT(gotReturnPressed()));//OriSeq, &sockSend, bytearrayToSend, destPort)));
            //timerForAck->start(1000);
            timerForAck->singleShot(1000, this, SLOT(gotReturnPressed()));//OriSeq, &sockSend, bytearrayToSend, destPort)));
            qDebug() << destPort;
        }
    }
    else
    {
        SeqNo ++;
        // qDebug() << "FIX: send message to other peers: " << textline->toPlainText();
        //textview->append(textedit->toPlainText());

        // Clear the textline to get ready for the next input message.
        textedit->clear();
    }
}

void ChatDialog::ackTimeout()
{
    /*
    // TODO 这里 不对 !!! 不 能用 recvMessageMap
   if (!recvMessageMap->contains(*OriSeq))
   {
        // Resend the message
        qint64 int64Status = sock->writeDatagram(*bytearrayToSend, QHostAddress::LocalHost, destPort);
        if (int64Status == -1) exit(1); 
        qDebug() << "sent to " << (quint16)(destPort) << " SIZE:" << int64Status;

        // Set timer to receive the remote peer's acknowledgment
        QTimer *timerForAck = new QTimer(this);
        //connect(timerForAck, SIGNAL(timeout()), this, SLOT(ackTimeout(OriSeq, sock, bytearrayToSend, destPort)));
        timerForAck->start(1000);
   } 
   */
}


void ChatDialog::gotRecvMessage()
{
    while (sockRecv->hasPendingDatagrams())
    {
        // read datagram into an instance of QByteArray
        QByteArray *bytearrayRecv = new QByteArray();
        bytearrayRecv->resize(sockRecv->pendingDatagramSize());
        QHostAddress senderAddr;
        quint16 senderPort;
        qint64 int64Status = sockRecv->readDatagram(bytearrayRecv->data(), bytearrayRecv->size(), 
            &senderAddr, &senderPort);
        if (int64Status == -1) exit(1); 

        // TODO: haven't heard the message : forward randomly
        // Pick up a port in a line topo
        int destPort = sockRecv->getMyPort();
        if (destPort == sockRecv->getMyPortMin()) destPort = destPort + 1;
        else if (destPort == sockRecv->getMyPortMax()) destPort = destPort - 1;
        else destPort = qrand()%2 == 0?destPort-1:destPort+1;
        // send the message
        NetSocket sockSend;
        int64Status = sockSend.writeDatagram(*bytearrayRecv, QHostAddress::LocalHost, destPort);
        if (int64Status == -1) exit(1); 
        qDebug() << "sent to " << (quint16)(destPort) << " SIZE:" << int64Status;

        // de-serialize
        QVariantMap recvMessage;
        QDataStream bytearrayStreamIn(bytearrayRecv, QIODevice::ReadOnly);
        bytearrayStreamIn >> recvMessage;
        //qDebug() << "recv the map: " << recvMessage;

        // update it to recvMessageMap
        recvMessageMap->insert(recvMessage.take("Origin").toString() + "." + recvMessage.take("SeqNo").toString(), recvMessage);

        // update it to updateStatusMap
        if (updateStatusMap->contains(recvMessage.take("Origin").toString()))
        {
            if (updateStatusMap->take(recvMessage.take("Origin").toString()).toInt())
            {
            }

        }
        else
        {
            updateStatusMap->insert(recvMessage.take("Origin").toString(), recvMessage.take("SeqNo").toInt());
        }


        // add string to the chat-log in the ChatDialog
        QString stringRecv(recvMessage.take("ChatText").toString());
        textview->append(stringRecv);
    }
}

// Tian. catch the returnPressed event to send the message
bool ChatDialog::eventFilter(QObject *obj, QEvent *event)
{
    if (obj == textedit && event->type() == QEvent::KeyPress)
    {
        QKeyEvent *keyevent = static_cast<QKeyEvent *>(event);
        if (keyevent->key() == Qt::Key_Return) {
            // if the content is null then the message would not be sent.
            if(textedit->toPlainText() == "")
                return true;
            else
                gotReturnPressed();
            return true;
        } else
        return false;
    }
    return false;
}

NetSocket::NetSocket()
{
	// Pick a range of four UDP ports to try to allocate by default,
	// computed based on my Unix user ID.
	// This makes it trivial for up to four Peerster instances per user
	// to find each other on the same host,
	// barring UDP port conflicts with other applications
	// (which are quite possible).
	// We use the range from 32768 to 49151 for this purpose.
	myPortMin = 32768 + (getuid() % 4096)*4;
	myPortMax = myPortMin + 3;
}

bool NetSocket::bind()
{
	// Try to bind to each of the range myPortMin..myPortMax in turn.
	for (int p = myPortMin; p <= myPortMax; p++) {
        // Tian added IP addr. here
		if (QUdpSocket::bind(p)) {
            myPort = p;
			qDebug() << "bound to UDP port " << p;
			return true;
		}
	}

	qDebug() << "Oops, no ports in my default range " << myPortMin
		<< "-" << myPortMax << " available";
	return false;
}

int main(int argc, char **argv)
{
	// Initialize Qt toolkit
	QApplication app(argc,argv);

	// Create an initial chat dialog window
	ChatDialog dialog;
	dialog.show();

	// Create a UDP network socket
    /* Tian: Deprecated for no use here.
	NetSocket sock;
	if (!sock.bind())
		exit(1);
    */

	// Enter the Qt main loop; everything else is event driven
	return app.exec();
}

